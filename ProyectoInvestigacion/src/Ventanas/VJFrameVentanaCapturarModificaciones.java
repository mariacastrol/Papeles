/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Clases.ConexionMysql;
import Clases.FuncionesGenerales;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADOLFO
 */
public class VJFrameVentanaCapturarModificaciones extends javax.swing.JFrame {

    /**
     * Creates new form JFrameVentanaCapturas
     */
    public VJFrameVentanaCapturarModificaciones() {
        initComponents();
        colorFondo = jPanel1.getBackground();
        jLabel3.setForeground(colorFondo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxOperacionPlanes = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSpinnerHorasUTC = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jSpinnerMinutosUTC = new javax.swing.JSpinner();
        jPanel5 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        botonSeleccionarAeropuertoPlanes = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        botonSeleccionarAeronavePlanes = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jTextField6 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        botonSeleccionarPilotoPlanes = new javax.swing.JButton();
        botonSeleccionarCopiloto = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        botonBorrar = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jTextFieldPersonasPasajeros = new javax.swing.JTextField();
        botonListaPasajeros = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        botonModificarPlanes = new javax.swing.JButton();
        jDateFecha = new com.toedter.calendar.JDateChooser();
        jPanel12 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jComboBoxOperacionManifiestos = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        botonSeleccionarCompaniaManifiestos = new javax.swing.JButton();
        botonSeleccionarAeronaveManifiestos = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jTextField16 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jTextField18 = new javax.swing.JTextField();
        botonSeleccionarAeropuertoManifiestos = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        botonDeclararPDF = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jTextField17 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jTextField19 = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jTextField20 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jTextField24 = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        jTextField25 = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        botonSeleccionarComandante = new javax.swing.JButton();
        botonSeleccionarPrimer = new javax.swing.JButton();
        botonSeleccionarSegundo = new javax.swing.JButton();
        botonSeleccionarTercero = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        botonBorrarTercero = new javax.swing.JButton();
        botonBorrarSegundo = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        botonDeclararSobrecargos = new javax.swing.JButton();
        jLabel48 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel34 = new javax.swing.JLabel();
        jSpinnerHoraItinerario = new javax.swing.JSpinner();
        jLabel35 = new javax.swing.JLabel();
        jSpinnerMinutosItinerario = new javax.swing.JSpinner();
        jLabel36 = new javax.swing.JLabel();
        jSpinnerHoraReal = new javax.swing.JSpinner();
        jLabel37 = new javax.swing.JLabel();
        jSpinnerMinutosReal = new javax.swing.JSpinner();
        jPanel16 = new javax.swing.JPanel();
        botonDeclararEmDesembarque1 = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MODIFICACIONES");
        setIconImage(getIconImage());
        setResizable(false);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(955, 620));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(935, 592));
        jPanel3.setLayout(null);

        jLabel1.setText("TIPO DE OPERACIÓN");
        jPanel3.add(jLabel1);
        jLabel1.setBounds(32, 32, 173, 14);

        jComboBoxOperacionPlanes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "APERTURA DE PLAN DE VUELO", "CIERRE DE PLAN DE VUELO" }));
        jComboBoxOperacionPlanes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxOperacionPlanesItemStateChanged(evt);
            }
        });
        jPanel3.add(jComboBoxOperacionPlanes);
        jComboBoxOperacionPlanes.setBounds(32, 52, 190, 22);

        jLabel2.setText("FECHA");
        jPanel3.add(jLabel2);
        jLabel2.setBounds(416, 32, 45, 14);

        jLabel6.setText("HORA (UTC)");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(688, 32, 135, 14);

        jSpinnerHorasUTC.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerHorasUTC.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerHorasUTC, "00"));
        jSpinnerHorasUTC.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerHorasUTCStateChanged(evt);
            }
        });
        jPanel3.add(jSpinnerHorasUTC);
        jSpinnerHorasUTC.setBounds(688, 52, 40, 18);

        jLabel7.setText(":");
        jPanel3.add(jLabel7);
        jLabel7.setBounds(732, 54, 4, 14);

        jSpinnerMinutosUTC.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerMinutosUTC.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerMinutosUTC, "00"));
        jSpinnerMinutosUTC.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMinutosUTCStateChanged(evt);
            }
        });
        jPanel3.add(jSpinnerMinutosUTC);
        jSpinnerMinutosUTC.setBounds(740, 52, 40, 18);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("AEROPUERTO/AERODROMO DE DESTINO"));

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel8.setText("OACI");

        jLabel9.setText("IATA");

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(255, 255, 255));
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        botonSeleccionarAeropuertoPlanes.setText("AGREGAR");
        botonSeleccionarAeropuertoPlanes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarAeropuertoPlanesActionPerformed(evt);
            }
        });

        jLabel23.setText("NOMBRE");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botonSeleccionarAeropuertoPlanes)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonSeleccionarAeropuertoPlanes)
                .addContainerGap())
        );

        jPanel3.add(jPanel5);
        jPanel5.setBounds(32, 112, 539, 113);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("AERONAVE(S)"));

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(255, 255, 255));
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel10.setText("IDENTIFICACIÓN AERONAVE");

        jTextField5.setEditable(false);
        jTextField5.setBackground(new java.awt.Color(255, 255, 255));
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel11.setText("TIPO DE AERONAVE");

        botonSeleccionarAeronavePlanes.setText("AGREGAR");
        botonSeleccionarAeronavePlanes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarAeronavePlanesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField5)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botonSeleccionarAeronavePlanes)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonSeleccionarAeronavePlanes)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel6);
        jPanel6.setBounds(591, 112, 312, 113);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("PERSONAL DE VUELO"));

        jTextField6.setEditable(false);
        jTextField6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel12.setText("PILOTO AL MANDO");

        jTextField7.setEditable(false);
        jTextField7.setBackground(new java.awt.Color(255, 255, 255));
        jTextField7.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel13.setText("N° DE LICENCIA");

        jLabel14.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N

        jTextField8.setEditable(false);
        jTextField8.setBackground(new java.awt.Color(255, 255, 255));

        jTextField9.setEditable(false);
        jTextField9.setBackground(new java.awt.Color(255, 255, 255));

        jLabel15.setText("COPILOTO");

        jLabel16.setText("N° DE LICENCIA");

        jLabel17.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N

        botonSeleccionarPilotoPlanes.setText("AGREGAR");
        botonSeleccionarPilotoPlanes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarPilotoPlanesActionPerformed(evt);
            }
        });

        botonSeleccionarCopiloto.setText("AGREGAR");
        botonSeleccionarCopiloto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarCopilotoActionPerformed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N

        botonBorrar.setText("BORRAR");
        botonBorrar.setEnabled(false);
        botonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 63, Short.MAX_VALUE))))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(107, 107, 107)
                                .addComponent(botonSeleccionarPilotoPlanes))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(botonBorrar)
                                .addGap(18, 18, 18)
                                .addComponent(botonSeleccionarCopiloto)))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonSeleccionarPilotoPlanes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonSeleccionarCopiloto)
                    .addComponent(botonBorrar))
                .addContainerGap())
        );

        jPanel3.add(jPanel7);
        jPanel7.setBounds(32, 241, 445, 188);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("PERSONAS A BORDO"));

        jTextFieldPersonasPasajeros.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPersonasPasajeros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPersonasPasajerosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPersonasPasajerosKeyTyped(evt);
            }
        });

        botonListaPasajeros.setText("LISTA DE PASAJEROS");
        botonListaPasajeros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListaPasajerosActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel19.setText("Se ha declaro una lista de pasajeros");
        jLabel19.setEnabled(false);

        jLabel3.setText("PERSONAS A BORDO");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jTextFieldPersonasPasajeros, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botonListaPasajeros))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPersonasPasajeros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonListaPasajeros)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap())
        );

        jPanel3.add(jPanel8);
        jPanel8.setBounds(32, 445, 447, 87);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("OTROS DATOS / OBSERVACIONES"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.add(jPanel9);
        jPanel9.setBounds(497, 241, 406, 156);

        botonModificarPlanes.setText("MODIFICAR");
        botonModificarPlanes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarPlanesActionPerformed(evt);
            }
        });
        jPanel3.add(botonModificarPlanes);
        botonModificarPlanes.setBounds(803, 556, 100, 23);

        jDateFecha.setDateFormatString("yyyy/MM/dd");
        jDateFecha.setMaxSelectableDate(new java.util.Date(1483250399000L));
        jDateFecha.setMinSelectableDate(new java.util.Date(1262325599000L));
        jDateFecha.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateFechaPropertyChange(evt);
            }
        });
        jPanel3.add(jDateFecha);
        jDateFecha.setBounds(416, 52, 152, 20);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("PDF DEL PLAN DE VUELO (OPCIONAL)"));

        jButton1.setText("SELECCIONAR ARCHIVO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel4.setText("Se ha especificado un archivo PDF");
        jLabel4.setEnabled(false);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel12);
        jPanel12.setBounds(497, 412, 406, 67);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("PLANES DE VUELO", jPanel1);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(null);

        jLabel20.setText("TIPO DE OPERACIÓN");
        jPanel4.add(jLabel20);
        jLabel20.setBounds(32, 32, 150, 14);

        jComboBoxOperacionManifiestos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MANIFIESTO DE SALIDA", "MANIFIESTO DE LLEGADA" }));
        jComboBoxOperacionManifiestos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxOperacionManifiestosItemStateChanged(evt);
            }
        });
        jPanel4.add(jComboBoxOperacionManifiestos);
        jComboBoxOperacionManifiestos.setBounds(32, 52, 190, 22);

        jLabel21.setText("FECHA");
        jPanel4.add(jLabel21);
        jLabel21.setBounds(416, 32, 33, 14);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("AERONAVE"));

        jTextField11.setEditable(false);
        jTextField11.setBackground(new java.awt.Color(255, 255, 255));

        jTextField12.setEditable(false);
        jTextField12.setBackground(new java.awt.Color(255, 255, 255));
        jTextField12.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel25.setText("COMPAÑÍA");

        jLabel26.setText("SIGLAS");

        jTextField13.setEditable(false);
        jTextField13.setBackground(new java.awt.Color(255, 255, 255));
        jTextField13.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel27.setText("EQUIPO");

        jLabel28.setText("MATRÍCULA");

        jTextField14.setEditable(false);
        jTextField14.setBackground(new java.awt.Color(255, 255, 255));
        jTextField14.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField15.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField15.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField15KeyTyped(evt);
            }
        });

        jLabel29.setText("No. DE VUELO");

        botonSeleccionarCompaniaManifiestos.setText("AGREGAR");
        botonSeleccionarCompaniaManifiestos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarCompaniaManifiestosActionPerformed(evt);
            }
        });

        botonSeleccionarAeronaveManifiestos.setText("AGREGAR");
        botonSeleccionarAeronaveManifiestos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarAeronaveManifiestosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField12)
                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)))
                    .addComponent(botonSeleccionarCompaniaManifiestos))
                .addGap(90, 90, 90)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(botonSeleccionarAeronaveManifiestos)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(20, 20, 20)
                            .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(90, 90, 90)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(jLabel25)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel29))
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonSeleccionarAeronaveManifiestos)
                    .addComponent(botonSeleccionarCompaniaManifiestos))
                .addContainerGap())
        );

        jPanel4.add(jPanel10);
        jPanel10.setBounds(32, 112, 871, 113);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("MOVIMIENTO DE OPERACIONES"));

        jTextField16.setEditable(false);
        jTextField16.setBackground(new java.awt.Color(255, 255, 255));

        jLabel30.setText("DESTINO");

        jLabel32.setText("SIGLAS");

        jTextField18.setEditable(false);
        jTextField18.setBackground(new java.awt.Color(255, 255, 255));
        jTextField18.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        botonSeleccionarAeropuertoManifiestos.setText("AGREGAR");
        botonSeleccionarAeropuertoManifiestos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarAeropuertoManifiestosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonSeleccionarAeropuertoManifiestos)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(jLabel32)
                    .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonSeleccionarAeropuertoManifiestos)
                .addContainerGap())
        );

        jPanel4.add(jPanel11);
        jPanel11.setBounds(32, 241, 639, 93);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("PDF (OPCIONAL)"));

        botonDeclararPDF.setText("DECLARAR");
        botonDeclararPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDeclararPDFActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel39.setText("Declarado");
        jLabel39.setEnabled(false);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonDeclararPDF)
                .addGap(18, 18, 18)
                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonDeclararPDF)
                    .addComponent(jLabel39))
                .addContainerGap())
        );

        jPanel4.add(jPanel13);
        jPanel13.setBounds(698, 459, 205, 66);

        jButton6.setText("GUARDAR");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton6);
        jButton6.setBounds(813, 556, 90, 23);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("PERSONAL DE VUELO"));

        jTextField17.setEditable(false);
        jTextField17.setBackground(new java.awt.Color(255, 255, 255));

        jLabel31.setText("COMANDANTE");

        jTextField19.setEditable(false);
        jTextField19.setBackground(new java.awt.Color(255, 255, 255));
        jTextField19.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel33.setText("N° DE LICENCIA");

        jTextField20.setEditable(false);
        jTextField20.setBackground(new java.awt.Color(255, 255, 255));
        jTextField20.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel41.setText("N° DE LICENCIA");

        jTextField21.setEditable(false);
        jTextField21.setBackground(new java.awt.Color(255, 255, 255));

        jLabel42.setText("1er. OFICIAL");

        jTextField22.setEditable(false);
        jTextField22.setBackground(new java.awt.Color(255, 255, 255));

        jLabel43.setText("2do. OFICIAL");

        jLabel44.setText("N° DE LICENCIA");

        jTextField23.setEditable(false);
        jTextField23.setBackground(new java.awt.Color(255, 255, 255));

        jTextField24.setEditable(false);
        jTextField24.setBackground(new java.awt.Color(255, 255, 255));

        jLabel45.setText("3er. OFICIAL");

        jTextField25.setEditable(false);
        jTextField25.setBackground(new java.awt.Color(255, 255, 255));

        jLabel46.setText("N° DE LICENCIA");

        botonSeleccionarComandante.setText("AGREGAR");
        botonSeleccionarComandante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarComandanteActionPerformed(evt);
            }
        });

        botonSeleccionarPrimer.setText("AGREGAR");
        botonSeleccionarPrimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarPrimerActionPerformed(evt);
            }
        });

        botonSeleccionarSegundo.setText("AGREGAR");
        botonSeleccionarSegundo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarSegundoActionPerformed(evt);
            }
        });

        botonSeleccionarTercero.setText("AGREGAR");
        botonSeleccionarTercero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSeleccionarTerceroActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N

        jLabel51.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N

        jLabel52.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N

        jLabel53.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N

        botonBorrarTercero.setText("BORRAR");
        botonBorrarTercero.setEnabled(false);
        botonBorrarTercero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarTerceroActionPerformed(evt);
            }
        });

        botonBorrarSegundo.setText("BORRAR");
        botonBorrarSegundo.setEnabled(false);
        botonBorrarSegundo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarSegundoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField21, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel31)
                            .addComponent(jLabel42)
                            .addComponent(jTextField22, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel14Layout.createSequentialGroup()
                                    .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel53, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel51, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel14Layout.createSequentialGroup()
                                    .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel41)
                            .addComponent(jLabel33)))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField24)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel45)
                                    .addComponent(jLabel43))
                                .addGap(174, 174, 174)))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel44)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel46))))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(botonSeleccionarTercero)
                        .addGap(18, 18, 18)
                        .addComponent(botonBorrarTercero)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(botonSeleccionarSegundo)
                                .addGap(18, 18, 18)
                                .addComponent(botonBorrarSegundo))
                            .addComponent(botonSeleccionarPrimer)
                            .addComponent(botonSeleccionarComandante))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botonSeleccionarComandante))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonSeleccionarPrimer)
                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonSeleccionarSegundo)
                            .addComponent(botonBorrarSegundo))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonSeleccionarTercero)
                            .addComponent(botonBorrarTercero)))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel42)
                            .addComponent(jLabel41))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel43)
                            .addComponent(jLabel44))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel45)
                            .addComponent(jLabel46))))
                .addContainerGap())
        );

        jPanel4.add(jPanel14);
        jPanel14.setBounds(32, 350, 639, 228);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("SOBRECARGOS"));

        botonDeclararSobrecargos.setText("DECLARAR");
        botonDeclararSobrecargos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDeclararSobrecargosActionPerformed(evt);
            }
        });

        jLabel48.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel48.setText("Declarado");
        jLabel48.setEnabled(false);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonDeclararSobrecargos)
                .addGap(18, 18, 18)
                .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonDeclararSobrecargos)
                    .addComponent(jLabel48))
                .addContainerGap())
        );

        jPanel4.add(jPanel15);
        jPanel15.setBounds(698, 241, 205, 67);

        jDateChooser2.setDateFormatString("yyyy/MM/dd");
        jDateChooser2.setMaxSelectableDate(new java.util.Date(1483250399000L));
        jDateChooser2.setMinSelectableDate(new java.util.Date(1262325599000L));
        jDateChooser2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser2PropertyChange(evt);
            }
        });
        jPanel4.add(jDateChooser2);
        jDateChooser2.setBounds(416, 52, 152, 20);

        jLabel34.setText("HORA ITINERARIO");
        jPanel4.add(jLabel34);
        jLabel34.setBounds(688, 32, 100, 14);

        jSpinnerHoraItinerario.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerHoraItinerario.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerHoraItinerario, "00"));
        jSpinnerHoraItinerario.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerHoraItinerarioStateChanged(evt);
            }
        });
        jPanel4.add(jSpinnerHoraItinerario);
        jSpinnerHoraItinerario.setBounds(688, 52, 40, 18);

        jLabel35.setText(":");
        jPanel4.add(jLabel35);
        jLabel35.setBounds(732, 54, 4, 14);

        jSpinnerMinutosItinerario.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerMinutosItinerario.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerMinutosItinerario, "00"));
        jSpinnerMinutosItinerario.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMinutosItinerarioStateChanged(evt);
            }
        });
        jPanel4.add(jSpinnerMinutosItinerario);
        jSpinnerMinutosItinerario.setBounds(740, 52, 40, 18);

        jLabel36.setText("HORA REAL");
        jPanel4.add(jLabel36);
        jLabel36.setBounds(810, 32, 57, 14);

        jSpinnerHoraReal.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerHoraReal.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerHoraReal, "00"));
        jSpinnerHoraReal.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerHoraRealStateChanged(evt);
            }
        });
        jPanel4.add(jSpinnerHoraReal);
        jSpinnerHoraReal.setBounds(810, 52, 40, 18);

        jLabel37.setText(":");
        jPanel4.add(jLabel37);
        jLabel37.setBounds(854, 54, 4, 14);

        jSpinnerMinutosReal.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerMinutosReal.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerMinutosReal, "00"));
        jSpinnerMinutosReal.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMinutosRealStateChanged(evt);
            }
        });
        jPanel4.add(jSpinnerMinutosReal);
        jSpinnerMinutosReal.setBounds(862, 52, 40, 18);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("EMBARQUE"));

        botonDeclararEmDesembarque1.setText("DECLARAR");
        botonDeclararEmDesembarque1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDeclararEmDesembarque1ActionPerformed(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel40.setText("Declarado");
        jLabel40.setEnabled(false);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonDeclararEmDesembarque1)
                .addGap(18, 18, 18)
                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonDeclararEmDesembarque1)
                    .addComponent(jLabel40))
                .addContainerGap())
        );

        jPanel4.add(jPanel16);
        jPanel16.setBounds(698, 350, 205, 66);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("MANIFIESTOS DE VUELO", jPanel2);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jTabbedPane1)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void botonSeleccionarAeropuertoPlanesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarAeropuertoPlanesActionPerformed
        VBJDialogAeropuertosPlanes capturarAeropuerto = new VBJDialogAeropuertosPlanes(this,true);
        String tipoOperacion = (String) jComboBoxOperacionPlanes.getSelectedItem();
        if (tipoOperacion.contains("APERTURA DE PLAN DE VUELO")) {
            capturarAeropuerto.jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("AEROPUERTO DE DESTINO"));
            capturarAeropuerto.setTitle("AEROPUERTOS: APERTURA DE PLAN DE VUELO");
        } else {
            capturarAeropuerto.jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("AEROPUERTO DE PROCEDENCIA"));
            capturarAeropuerto.setTitle("AEROPUERTOS: CIERRE DE PLAN DE VUELO");
        }
        String [] cT = {"codigo_oaci","codigo_iata","nombre"};
        if (capturarAeropuerto.setDatosConexion (sv,us,pw,dB,cT,"AEROPUERTOS_PLANES","codigo_oaci",aeropuertoPlanesOriginal)) {
            capturarAeropuerto.setVisible(true);
        } else {
            capturarAeropuerto.dispose();
        }    
    }//GEN-LAST:event_botonSeleccionarAeropuertoPlanesActionPerformed

    private void botonSeleccionarAeronavePlanesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarAeronavePlanesActionPerformed
        VCJDialogAeronavesPlanes capturarAeronave = new VCJDialogAeronavesPlanes(this,true);
        String tipoOperacion = (String) jComboBoxOperacionPlanes.getSelectedItem();
        if (tipoOperacion.contains("APERTURA DE PLAN DE VUELO")) {
            capturarAeronave.setTitle("AERONAVES: APERTURA DE PLAN DE VUELO");
        } else {
            capturarAeronave.setTitle("AERONAVES: CIERRE DE PLAN DE VUELO");
        }
        String [] cT = {"identificacion_aeronave","tipo"};
        if (capturarAeronave.setDatosConexion (sv,us,pw,dB,cT,"AERONAVES_PLANES","identificacion_aeronave",aeronavePlanesOriginal)) {
            capturarAeronave.setVisible(true);
        } else {
            capturarAeronave.dispose();
        }
    }//GEN-LAST:event_botonSeleccionarAeronavePlanesActionPerformed

    private void botonSeleccionarPilotoPlanesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarPilotoPlanesActionPerformed
        VDJDialogPilotosPlanes capturarPiloto = new VDJDialogPilotosPlanes(this,true);
        String tipoOperacion = (String) jComboBoxOperacionPlanes.getSelectedItem();
        if (tipoOperacion.contains("APERTURA DE PLAN DE VUELO")) {
            capturarPiloto.setTitle("PILOTOS: APERTURA DE PLAN DE VUELO");
        } else {
            capturarPiloto.setTitle("PILOTOS: CIERRE DE PLAN DE VUELO");
        }
        String [] cT = {"no_licencia","nombre","apellido_paterno","apellido_materno","tipo_licencia"};
        if (capturarPiloto.setDatosConexion (sv,us,pw,dB,cT,"PILOTOS_PLANES","no_licencia",pilotoPlanesOriginal)) {
            capturarPiloto.setVisible(true);
        } else {
            capturarPiloto.dispose();
        }
    }//GEN-LAST:event_botonSeleccionarPilotoPlanesActionPerformed

    private void botonSeleccionarCopilotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarCopilotoActionPerformed
        VEJDialogCopilotosPlanes capturarCopiloto = new VEJDialogCopilotosPlanes(this,true);
        String tipoOperacion = (String) jComboBoxOperacionPlanes.getSelectedItem();
        if (tipoOperacion.equals("APERTURA DE PLAN DE VUELO")) {
            capturarCopiloto.setTitle("COPILOTOS: APERTURA DE PLAN DE VUELO");
        } else {
            capturarCopiloto.setTitle("COPILOTOS: CIERRE DE PLAN DE VUELO");
        }
        String [] cT = {"no_licencia","nombre","apellido_paterno","apellido_materno","tipo_licencia"};
        if (capturarCopiloto.setDatosConexion (sv,us,pw,dB,cT,"COPILOTOS_PLANES","no_licencia",copilotoPlanesOriginal)) {
            capturarCopiloto.setVisible(true);
        } else {
            capturarCopiloto.dispose();
        }   
    }//GEN-LAST:event_botonSeleccionarCopilotoActionPerformed

    private void botonSeleccionarCompaniaManifiestosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarCompaniaManifiestosActionPerformed
        GJDialogCompanias capturarCompania = new GJDialogCompanias(this,true);
        String tipoOperacion = (String) jComboBoxOperacionManifiestos.getSelectedItem();
        if (tipoOperacion.contains("MANIFIESTO DE SALIDA")) {
            capturarCompania.setTitle("COMPAÑÍAS: MANIFIESTO DE SALIDA");
        } else {
            capturarCompania.setTitle("COMPAÑÍAS: MANIFIESTO DE LLEGADA");
        }
        String [] cT = {"siglas","nombre"};
        if (capturarCompania.setDatosConexion (sv,us,pw,dB,cT,"COMPANIAS","siglas")) {
            capturarCompania.setVisible(true);
        } else {
            capturarCompania.dispose();
        }
    }//GEN-LAST:event_botonSeleccionarCompaniaManifiestosActionPerformed

    private void botonSeleccionarAeronaveManifiestosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarAeronaveManifiestosActionPerformed
        HJDialogAeronavesManifiestos capturarAeronave = new HJDialogAeronavesManifiestos(this,true);
        String tipoOperacion = (String) jComboBoxOperacionManifiestos.getSelectedItem();
        if (tipoOperacion.contains("MANIFIESTO DE SALIDA")) {
            capturarAeronave.setTitle("AERONAVES: MANIFIESTO DE SALIDA");
        } else {
            capturarAeronave.setTitle("AERONAVES: MANIFIESTO DE LLEGADA");
        }
        String [] cT = {"matricula","equipo"};
        if (capturarAeronave.setDatosConexion (sv,us,pw,dB,cT,"AERONAVES_MANIFIESTOS","matricula")) {
            capturarAeronave.setVisible(true);
        } else {
            capturarAeronave.dispose();
        }
    }//GEN-LAST:event_botonSeleccionarAeronaveManifiestosActionPerformed

    private void botonSeleccionarAeropuertoManifiestosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarAeropuertoManifiestosActionPerformed
        IJDialogAeropuertosManifiestos capturarAeropuerto = new IJDialogAeropuertosManifiestos(this,true);
        String tipoOperacion = (String) jComboBoxOperacionManifiestos.getSelectedItem();
        if (tipoOperacion.contains("MANIFIESTO DE SALIDA")) {
            capturarAeropuerto.jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("AEROPUERTO DE DESTINO"));
            capturarAeropuerto.setTitle("AEROPUERTOS: MANIFIESTO DE SALIDA");
        } else {
            capturarAeropuerto.jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("AEROPUERTO DE ORIGEN"));
            capturarAeropuerto.setTitle("AEROPUERTOS: MANIFIESTO DE LLEGADA");
        }
        String [] cT = {"codigo_iata","codigo_oaci","nombre"};
        if (capturarAeropuerto.setDatosConexion (sv,us,pw,dB,cT,"AEROPUERTOS_MANIFIESTOS","codigo_iata")) {
            capturarAeropuerto.setVisible(true);
        } else {
            capturarAeropuerto.dispose();
        }
    }//GEN-LAST:event_botonSeleccionarAeropuertoManifiestosActionPerformed

    private void botonSeleccionarComandanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarComandanteActionPerformed
        JJDialogComandantes capturarComandate = new JJDialogComandantes(this,true);
        String tipoOperacion = (String) jComboBoxOperacionPlanes.getSelectedItem();
        if (tipoOperacion.contains("APERTURA DE PLAN DE VUELO")) {
            capturarComandate.setTitle("COMANDANTES: APERTURA DE PLAN DE VUELO");
        } else {
            capturarComandate.setTitle("COMANDANTES: CIERRE DE PLAN DE VUELO");
        }
        String [] cT = {"no_licencia","nombre","apellido_paterno","apellido_materno","tipo_licencia"};
        if (capturarComandate.setDatosConexion (sv,us,pw,dB,cT,"COMANDANTE","no_licencia")) {
            capturarComandate.setVisible(true);
        } else {
            capturarComandate.dispose();
        }
    }//GEN-LAST:event_botonSeleccionarComandanteActionPerformed

    private void botonSeleccionarPrimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarPrimerActionPerformed
        KJDialogPrimeros capturarPrimer = new KJDialogPrimeros(this,true);
        String tipoOperacion = (String) jComboBoxOperacionPlanes.getSelectedItem();
        if (tipoOperacion.contains("APERTURA DE PLAN DE VUELO")) {
            capturarPrimer.setTitle("PRIMEROS OFICIALES: APERTURA DE PLAN DE VUELO");
        } else {
            capturarPrimer.setTitle("PRIMEROS OFICIALES: CIERRE DE PLAN DE VUELO");
        }
        String [] cT = {"no_licencia","nombre","apellido_paterno","apellido_materno","tipo_licencia"};
        if (capturarPrimer.setDatosConexion (sv,us,pw,dB,cT,"PRIMER_OFICIAL","no_licencia")) {
            capturarPrimer.setVisible(true);
        } else {
            capturarPrimer.dispose();
        }
    }//GEN-LAST:event_botonSeleccionarPrimerActionPerformed

    private void botonSeleccionarSegundoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarSegundoActionPerformed
        LJDialogSegundos capturarSegundo = new LJDialogSegundos(this,true);
        String tipoOperacion = (String) jComboBoxOperacionPlanes.getSelectedItem();
        if (tipoOperacion.contains("APERTURA DE PLAN DE VUELO")) {
            capturarSegundo.setTitle("SEGUNDOS OFICIALES: APERTURA DE PLAN DE VUELO");
        } else {
            capturarSegundo.setTitle("SEGUNDOS OFICIALES: CIERRE DE PLAN DE VUELO");
        }
        String [] cT = {"no_licencia","nombre","apellido_paterno","apellido_materno","tipo_licencia"};
        if (capturarSegundo.setDatosConexion (sv,us,pw,dB,cT,"SEGUNDO_OFICIAL","no_licencia")) {
            capturarSegundo.setVisible(true);
        } else {
            capturarSegundo.dispose();
        }
    }//GEN-LAST:event_botonSeleccionarSegundoActionPerformed

    private void botonSeleccionarTerceroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionarTerceroActionPerformed
        MJDialogTerceros capturarTercero = new MJDialogTerceros(this,true);
        String tipoOperacion = (String) jComboBoxOperacionPlanes.getSelectedItem();
        if (tipoOperacion.contains("APERTURA DE PLAN DE VUELO")) {
            capturarTercero.setTitle("TERCEROS OFICIALES: APERTURA DE PLAN DE VUELO");
        } else {
            capturarTercero.setTitle("TERCEROS OFICIALES: CIERRE DE PLAN DE VUELO");
        }
        String [] cT = {"no_licencia","nombre","apellido_paterno","apellido_materno","tipo_licencia"};
        if (capturarTercero.setDatosConexion (sv,us,pw,dB,cT,"TERCER_OFICIAL","no_licencia")) {
            capturarTercero.setVisible(true);
        } else {
            capturarTercero.dispose();
        }
    }//GEN-LAST:event_botonSeleccionarTerceroActionPerformed

    private void jSpinnerHorasUTCStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerHorasUTCStateChanged
        int horas = (int) jSpinnerHorasUTC.getValue();
        int minutos = (int) jSpinnerMinutosUTC.getValue();
        FuncionesGenerales.spinnerNumericoCiclico(0,23,horas,jSpinnerHorasUTC);
        if (horasPlanesOriginal != null && minutosPlanesOriginal != null) {
            if (Integer.parseInt(horasPlanesOriginal) == horas && Integer.parseInt(minutosPlanesOriginal) == minutos) {
                jLabel6.setForeground(Color.BLACK);
            } else {
                jLabel6.setForeground(new java.awt.Color(0,100,0));
            }
        }
    }//GEN-LAST:event_jSpinnerHorasUTCStateChanged

    private void jSpinnerMinutosUTCStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMinutosUTCStateChanged
        int minutos = (int) jSpinnerMinutosUTC.getValue();
        int horas = (int) jSpinnerHorasUTC.getValue();
        FuncionesGenerales.spinnerNumericoCiclico(0,59,minutos,jSpinnerMinutosUTC);
        if (minutosPlanesOriginal != null && horasPlanesOriginal != null) {
            if (Integer.parseInt(minutosPlanesOriginal) == minutos && Integer.parseInt(horasPlanesOriginal) == horas) {
                jLabel6.setForeground(Color.BLACK);
            } else {
                jLabel6.setForeground(new java.awt.Color(0,100,0));
            }
        }
    }//GEN-LAST:event_jSpinnerMinutosUTCStateChanged

    private void jSpinnerHoraItinerarioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerHoraItinerarioStateChanged
        int valor = (int) jSpinnerHoraItinerario.getValue();
        FuncionesGenerales.spinnerNumericoCiclico(0,23,valor,jSpinnerHoraItinerario);
    }//GEN-LAST:event_jSpinnerHoraItinerarioStateChanged

    private void jSpinnerMinutosItinerarioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMinutosItinerarioStateChanged
        int valor = (int) jSpinnerMinutosItinerario.getValue();
        FuncionesGenerales.spinnerNumericoCiclico(0,59,valor,jSpinnerMinutosItinerario);
    }//GEN-LAST:event_jSpinnerMinutosItinerarioStateChanged

    private void jSpinnerHoraRealStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerHoraRealStateChanged
        int valor = (int) jSpinnerHoraReal.getValue();
        FuncionesGenerales.spinnerNumericoCiclico(0,23,valor,jSpinnerHoraReal);
    }//GEN-LAST:event_jSpinnerHoraRealStateChanged

    private void jSpinnerMinutosRealStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMinutosRealStateChanged
        int valor = (int) jSpinnerMinutosReal.getValue();
        FuncionesGenerales.spinnerNumericoCiclico(0,59,valor,jSpinnerMinutosReal);
    }//GEN-LAST:event_jSpinnerMinutosRealStateChanged

    private void botonListaPasajerosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListaPasajerosActionPerformed
        VFJDialogListaPasajerosPlanes capturarListaPasajeros = new VFJDialogListaPasajerosPlanes(this,true);
        String tipoOperacion = (String) jComboBoxOperacionPlanes.getSelectedItem();
        if (tipoOperacion.equals("APERTURA DE PLAN DE VUELO")) {
            capturarListaPasajeros.setTitle("LISTA DE PASAJEROS: APERTURA DE PLAN DE VUELO");
        } else {
            capturarListaPasajeros.setTitle("LISTA DE PASAJEROS: CIERRE DE PLAN DE VUELO");
        }
        if (jLabel19.isEnabled()) {
            DefaultTableModel modelo = (DefaultTableModel) capturarListaPasajeros.jTableListaPasajeros.getModel();
            for (String[] listaPasajero : listaPasajeros) {
                modelo.addRow(listaPasajero);
            }
        }
        capturarListaPasajeros.setVisible(true);      
    }//GEN-LAST:event_botonListaPasajerosActionPerformed

    private void botonDeclararSobrecargosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDeclararSobrecargosActionPerformed
        NJDialogListaSobrecargos capturarListaSobrecargos = new NJDialogListaSobrecargos(this,true);
        String tipoOperacion = (String) jComboBoxOperacionManifiestos.getSelectedItem();
        if (tipoOperacion.contains("MANIFIESTO DE SALIDA")) {
            capturarListaSobrecargos.setTitle("LISTA DE SOBRECARGOS: MANIFIESTO DE SALIDA");
        } else {
            capturarListaSobrecargos.setTitle("LISTA DE SOBRECARGOS: MANIFIESTO DE LLEGADA");
        }
        if (jLabel48.isEnabled()) {
            DefaultTableModel modelo = (DefaultTableModel) capturarListaSobrecargos.jTableSobrecargos.getModel();
            String [] listaSobrecargo = listaSobrecargos.split(", ");
            for (String sobrecargo : listaSobrecargo) {
                String[] valor = {sobrecargo};
                modelo.addRow(valor);
            }
        }
        capturarListaSobrecargos.setVisible(true); 
    }//GEN-LAST:event_botonDeclararSobrecargosActionPerformed

    private void botonDeclararPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDeclararPDFActionPerformed
        RJDialogPDFManifiestos capturarPDFManifiestos = new RJDialogPDFManifiestos(this,true);
        String tipoOperacion = (String) jComboBoxOperacionManifiestos.getSelectedItem();
        String nombreTabla = "PDFS_MANIFIESTOS";
        if (tipoOperacion.contains("MANIFIESTO DE SALIDA")) {
            capturarPDFManifiestos.setTitle("PDF'S: MANIFIESTO DE SALIDA");
            capturarPDFManifiestos.jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("PDF DEL MANIFIESTO DE SALIDA"));
        } else {
            capturarPDFManifiestos.setTitle("PDF'S: MANIFIESTO DE LLEGADA");
            capturarPDFManifiestos.jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("PDF DEL MANIFIESTO DE LLEGADA"));
        }
        String [] cT = {"ruta_pdf","nombre"};
        if (capturarPDFManifiestos.setDatosConexion (sv,us,pw,dB,cT,nombreTabla,"ruta_pdf")) {
            capturarPDFManifiestos.setVisible(true);
        } else {
            capturarPDFManifiestos.dispose();
        }                       
    }//GEN-LAST:event_botonDeclararPDFActionPerformed

    private void jTextFieldPersonasPasajerosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPersonasPasajerosKeyTyped
        int limite = 3;
        char caracterValidar = evt.getKeyChar();
        if (!((Character.isDigit(caracterValidar) || Character.isISOControl(caracterValidar)) && jTextFieldPersonasPasajeros.getText().length() < limite)){
            getToolkit().beep(); 
            evt.consume();
        } else {
            Color cError = new Color(rError, gError, bError);
            if (jLabel3.getForeground().getRGB() == cError.getRGB() && (jTextFieldPersonasPasajeros.getText() == null || jTextFieldPersonasPasajeros.getText().equals(""))) {
                jLabel3.setForeground(new java.awt.Color(0,0,0));
            }
        }
    }//GEN-LAST:event_jTextFieldPersonasPasajerosKeyTyped

    private void jTextArea1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyTyped
        int limite = 1000;
        if (jTextArea1.getText().length() > limite - 1){
            getToolkit().beep(); 
            evt.consume();
        } else {
            char caracterValidar = evt.getKeyChar();
            char caracterMayuscula = Character.toUpperCase(caracterValidar);
            evt.setKeyChar(caracterMayuscula);  
        }     
    }//GEN-LAST:event_jTextArea1KeyTyped

    private void botonModificarPlanesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarPlanesActionPerformed
        ConexionMysql conexionPlanes= new ConexionMysql();
        if (conexionPlanes.conectarBD(sv,us,pw,dB)) {
            if ("APERTURA DE PLAN DE VUELO".equals(jComboBoxOperacionPlanes.getSelectedItem().toString())) {
                ////////////////////////////////////////////////////////////
                Color cGreen = new Color(0,100,0);
                String nombreTablaMysql = "APERTURAS_DE_VUELO";
                String columnasTablaMysql [] = {"AQUI VA LA COLUMNA A MODIFICAR"};
                String datosActualizados [] = {"AQUI VA EL NUEVO VALOR"};
                boolean seguirActualizando = true;
                if (jTextField1.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR AEROPUERTO
                    columnasTablaMysql[0] = "aeropuerto_destino";
                    datosActualizados[0] = jTextField1.getText();
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR AEROPUERTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jTextField4.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR AERONAVE
                    columnasTablaMysql[0] = "aeronave";
                    datosActualizados[0] = jTextField4.getText();
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR AERONAVE",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jTextField6.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR PILOTO
                    columnasTablaMysql[0] = "piloto";
                    datosActualizados[0] = jTextField7.getText();
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR PILOTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jTextArea1.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR MULTIPLES RENGLONES
                    columnasTablaMysql[0] = "otros_datos";
                    datosActualizados[0] = jTextArea1.getText();
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR OTROS DATOS",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jTextFieldPersonasPasajeros.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR NO PERSONAS A BORDO
                    columnasTablaMysql[0] = "no_personas_a_bordo";
                    datosActualizados[0] = jTextFieldPersonasPasajeros.getText();
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR NÚMERO DE PERSONAS A BORDO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jTextField8.getForeground().getRGB() == cGreen.getRGB() && copilotoPlanesOriginal != null &&  FuncionesGenerales.estaVacioJTextField(jTextField8) && seguirActualizando) { // ELIMINAR COPILOTO
                    if (!conexionPlanes.eliminarFilaEnTabla("COPILOTOS_APERTURA","fecha",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"ERROR AL ELIMINAR COPILOTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                } else if (jTextField8.getForeground().getRGB() == cGreen.getRGB() && copilotoPlanesOriginal == null && seguirActualizando) { // AGREGAR COPILOTO
                    String copilotos [] = {"fecha","copiloto"};
                    String [] valores = {fechaCompletaPlanesOriginal,jTextField9.getText()};
                    String mensajeSiRepiteRegistro = "REGISTROS DUPLICADOS EN TABLA \"COPILOTOS_APERTURA\"";
                    if(!conexionPlanes.insertarFilaEnTabla("COPILOTOS_APERTURA",copilotos,valores,mensajeSiRepiteRegistro)){
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR COPILOTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                } else if (jTextField8.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // MODIFICAR COPILOTO
                    columnasTablaMysql[0] = "copiloto";
                    datosActualizados[0] = jTextField9.getText();
                    if (!conexionPlanes.modificarFilaEnTabla("COPILOTOS_APERTURA",columnasTablaMysql, datosActualizados, "fecha",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR COPILOTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jLabel4.getForeground().getRGB() == cGreen.getRGB() && rutaPDFPlanesOriginal != null &&  rutaPDF == null && seguirActualizando) { // ELIMINAR PDF
                    System.out.println("###########");
                    if (!conexionPlanes.eliminarFilaEnTabla("RELACION_PDF_APERTURAS","fecha",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"ERROR AL ELIMINAR PDF",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                } else if (jLabel4.getForeground().getRGB() == cGreen.getRGB() && rutaPDFPlanesOriginal == null && seguirActualizando) { // AGREGAR PDF
                    System.out.println("AGREGAR");
                    String pdfs [] = {"fecha","pdf"};
                    String [] valores = {fechaCompletaPlanesOriginal,rutaPDF};
                    String mensajeSiRepiteRegistro = "REGISTROS DUPLICADOS EN TABLA \"RELACION_PDF_APERTURAS\"";
                    if(!conexionPlanes.insertarFilaEnTabla("RELACION_PDF_APERTURAS",pdfs,valores,mensajeSiRepiteRegistro)){
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR PDF",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                } else if (jLabel4.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // MODIFICAR PDF
                    System.out.println("ACTUALIXAR");
                    columnasTablaMysql[0] = "pdf";
                    datosActualizados[0] = rutaPDF;
                    if (!conexionPlanes.modificarFilaEnTabla("RELACION_PDF_APERTURAS",columnasTablaMysql, datosActualizados, "fecha",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR PDF",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if ((jLabel2.getForeground().getRGB() == cGreen.getRGB() || jLabel6.getForeground().getRGB() == cGreen.getRGB()) && seguirActualizando) { // ACTUALIZAR FECHA
                    String horas = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerHorasUTC.getValue().toString()));
                    String minutos = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerMinutosUTC.getValue().toString()));          
                    SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");   
                    String fechaCompleta = formato.format(jDateFecha.getDate()) + " " + horas + ":" + minutos + ":00";
                    columnasTablaMysql[0] = "fecha_hora";
                    datosActualizados[0] = fechaCompleta;
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR PILOTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jLabel19.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR LISTA PASAJEROS
                    int totalErroresAlEliminar = 0;
                    if (listaPasajerosOriginal != null) {
                        for (int i = 0; i < listaPasajerosOriginal.length; i++) {
                            if (!conexionPlanes.eliminarFilaEnTabla("PASAJEROS_APERTURA","id_pasajero",listaPasajerosOriginal[i][0])) {
                                totalErroresAlEliminar++;
                            }
                        }
                        if (totalErroresAlEliminar > 0) {
                            JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"ERROR AL ELIMINAR PASAJERO",JOptionPane.ERROR_MESSAGE);
                            seguirActualizando = false;
                        }
                    }
                    if (seguirActualizando) {
                        String horas = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerHorasUTC.getValue().toString()));
                        String minutos = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerMinutosUTC.getValue().toString()));
                        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
                        String fechaCompleta = formato.format(jDateFecha.getDate()) + " " + horas + ":" + minutos + ":00";
                        String tablaPasajeros = "PASAJEROS_APERTURA";
                        String mensajeSiRepiteRegistros = "REGISTROS DUPLICADOS EN TABLA \"PASAJEROS_APERTURA\"";
                        String columnasTablasPasajeros [] = {"id_pasajero","nombre","apellido_paterno","apellido_materno","nacionalidad","fecha"};
                        SimpleDateFormat formato2 = new SimpleDateFormat("yyyyMMdd");   
                        String fechaJunta = formato2.format(jDateFecha.getDate()) + horas + minutos;
                        for (String[] pasajero : listaPasajeros) {
                            String sinFecha = pasajero[0];
                            pasajero[0] = fechaJunta + sinFecha;
                            pasajero[5] = fechaCompleta;
                        }

                        if(!conexionPlanes.insertarTablaEnTabla(tablaPasajeros,columnasTablasPasajeros,listaPasajeros,mensajeSiRepiteRegistros)){
                            JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR REGISTRO",JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
                ///////////////////////////////////////////////////
            } else {
                ///////////////////////
                Color cGreen = new Color(0,100,0);
                String nombreTablaMysql = "CIERRES_DE_PLAN";
                String columnasTablaMysql [] = {"AQUI VA LA COLUMNA A MODIFICAR"};
                String datosActualizados [] = {"AQUI VA EL NUEVO VALOR"};
                boolean seguirActualizando = true;
                if (jTextField1.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR AEROPUERTO
                    columnasTablaMysql[0] = "aeropuerto_origen";
                    datosActualizados[0] = jTextField1.getText();
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR AEROPUERTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jTextField4.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR AERONAVE
                    columnasTablaMysql[0] = "aeronave";
                    datosActualizados[0] = jTextField4.getText();
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR AERONAVE",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jTextField6.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR PILOTO
                    columnasTablaMysql[0] = "piloto";
                    datosActualizados[0] = jTextField7.getText();
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR PILOTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jTextArea1.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR MULTIPLES RENGLONES
                    columnasTablaMysql[0] = "observaciones";
                    datosActualizados[0] = jTextArea1.getText();
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR OTROS DATOS",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jTextFieldPersonasPasajeros.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR NO PERSONAS A BORDO
                    columnasTablaMysql[0] = "no_pasajeros";
                    datosActualizados[0] = jTextFieldPersonasPasajeros.getText();
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR NÚMERO DE PERSONAS A BORDO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jTextField8.getForeground().getRGB() == cGreen.getRGB() && copilotoPlanesOriginal != null &&  FuncionesGenerales.estaVacioJTextField(jTextField8) && seguirActualizando) { // ELIMINAR COPILOTO
                    if (!conexionPlanes.eliminarFilaEnTabla("COPILOTOS_CIERRE","fecha",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"ERROR AL ELIMINAR COPILOTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                } else if (jTextField8.getForeground().getRGB() == cGreen.getRGB() && copilotoPlanesOriginal == null && seguirActualizando) { // AGREGAR COPILOTO
                    String copilotos [] = {"fecha","copiloto"};
                    String [] valores = {fechaCompletaPlanesOriginal,jTextField9.getText()};
                    String mensajeSiRepiteRegistro = "REGISTROS DUPLICADOS EN TABLA \"COPILOTOS_CIERRE\"";
                    if(!conexionPlanes.insertarFilaEnTabla("COPILOTOS_CIERRE",copilotos,valores,mensajeSiRepiteRegistro)){
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR COPILOTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                } else if (jTextField8.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // MODIFICAR COPILOTO
                    columnasTablaMysql[0] = "copiloto";
                    datosActualizados[0] = jTextField9.getText();
                    if (!conexionPlanes.modificarFilaEnTabla("COPILOTOS_CIERRE",columnasTablaMysql, datosActualizados, "fecha",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR COPILOTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jLabel4.getForeground().getRGB() == cGreen.getRGB() && rutaPDFPlanesOriginal != null &&  rutaPDF == null && seguirActualizando) { // ELIMINAR PDF
                    System.out.println("###########");
                    if (!conexionPlanes.eliminarFilaEnTabla("RELACION_PDF_CIERRES","fecha",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"ERROR AL ELIMINAR PDF",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                } else if (jLabel4.getForeground().getRGB() == cGreen.getRGB() && rutaPDFPlanesOriginal == null && seguirActualizando) { // AGREGAR PDF
                    System.out.println("AGREGAR");
                    String pdfs [] = {"fecha","pdf"};
                    String [] valores = {fechaCompletaPlanesOriginal,rutaPDF};
                    String mensajeSiRepiteRegistro = "REGISTROS DUPLICADOS EN TABLA \"RELACION_PDF_CIERRES\"";
                    if(!conexionPlanes.insertarFilaEnTabla("RELACION_PDF_CIERRES",pdfs,valores,mensajeSiRepiteRegistro)){
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR PDF",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                } else if (jLabel4.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // MODIFICAR PDF
                    System.out.println("ACTUALIXAR");
                    columnasTablaMysql[0] = "pdf";
                    datosActualizados[0] = rutaPDF;
                    if (!conexionPlanes.modificarFilaEnTabla("RELACION_PDF_CIERRES",columnasTablaMysql, datosActualizados, "fecha",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR PDF",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if ((jLabel2.getForeground().getRGB() == cGreen.getRGB() || jLabel6.getForeground().getRGB() == cGreen.getRGB()) && seguirActualizando) { // ACTUALIZAR FECHA
                    String horas = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerHorasUTC.getValue().toString()));
                    String minutos = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerMinutosUTC.getValue().toString()));          
                    SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");   
                    String fechaCompleta = formato.format(jDateFecha.getDate()) + " " + horas + ":" + minutos + ":00";
                    columnasTablaMysql[0] = "fecha_hora";
                    datosActualizados[0] = fechaCompleta;
                    if (!conexionPlanes.modificarFilaEnTabla(nombreTablaMysql, columnasTablaMysql, datosActualizados, "fecha_hora",fechaCompletaPlanesOriginal)) {
                        JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO ACTUALIZAR PILOTO",JOptionPane.ERROR_MESSAGE);
                        seguirActualizando = false;
                    }
                }
                if (jLabel19.getForeground().getRGB() == cGreen.getRGB() && seguirActualizando) { // ACTUALIZAR LISTA PASAJEROS
                    int totalErroresAlEliminar = 0;
                    if (listaPasajerosOriginal != null) {
                        for (int i = 0; i < listaPasajerosOriginal.length; i++) {
                            if (!conexionPlanes.eliminarFilaEnTabla("PASAJEROS_CIERRE","id_pasajero",listaPasajerosOriginal[i][0])) {
                                totalErroresAlEliminar++;
                            }
                        }
                        if (totalErroresAlEliminar > 0) {
                            JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"ERROR AL ELIMINAR PASAJERO",JOptionPane.ERROR_MESSAGE);
                            seguirActualizando = false;
                        }
                    }
                    if (seguirActualizando) {
                        String horas = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerHorasUTC.getValue().toString()));
                        String minutos = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerMinutosUTC.getValue().toString()));
                        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
                        String fechaCompleta = formato.format(jDateFecha.getDate()) + " " + horas + ":" + minutos + ":00";
                        String tablaPasajeros = "PASAJEROS_CIERRE";
                        String mensajeSiRepiteRegistros = "REGISTROS DUPLICADOS EN TABLA \"PASAJEROS_CIERRE\"";
                        String columnasTablasPasajeros [] = {"id_pasajero","nombre","apellido_paterno","apellido_materno","nacionalidad","fecha"};
                        SimpleDateFormat formato2 = new SimpleDateFormat("yyyyMMdd");   
                        String fechaJunta = formato2.format(jDateFecha.getDate()) + horas + minutos;
                        for (String[] pasajero : listaPasajeros) {
                            String sinFecha = pasajero[0];
                            pasajero[0] = fechaJunta + sinFecha;
                            pasajero[5] = fechaCompleta;
                        }

                        if(!conexionPlanes.insertarTablaEnTabla(tablaPasajeros,columnasTablasPasajeros,listaPasajeros,mensajeSiRepiteRegistros)){
                            JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR REGISTRO",JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
                ///////////////////
            }
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO CONECTAR A LA BASE",JOptionPane.ERROR_MESSAGE);
        }    
    }//GEN-LAST:event_botonModificarPlanesActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int vacios = 0;
        String mensaje = "NO HA ESPECIFICADO LOS SIGUIENTES CAMPOS OBLIGATORIOS:";
        if (jDateChooser2.getDate() == null) {
            jLabel21.setForeground(new java.awt.Color(rError,gError,bError));
            vacios++;
            mensaje += "\nFECHA";
        }
        if (jTextField11.getText() == null || "".equals(jTextField11.getText())) {
            botonSeleccionarCompaniaManifiestos.setForeground(new java.awt.Color(rError,gError,bError));
            vacios++;
            mensaje += "\nCOMPAÑÍA";
        }
        if (jTextField13.getText() == null || "".equals(jTextField13.getText())) {
            botonSeleccionarAeronaveManifiestos.setForeground(new java.awt.Color(rError,gError,bError));
            vacios++;
            mensaje += "\nEQUIPO";
        }
        if (jTextField15.getText() == null || "".equals(jTextField15.getText())) {
            jLabel29.setForeground(new java.awt.Color(rError,gError,bError));
            vacios++;
            mensaje += "\nNo. DE VUELO";
        }
        if (jTextField16.getText() == null || "".equals(jTextField16.getText())) {
            botonSeleccionarAeropuertoManifiestos.setForeground(new java.awt.Color(rError,gError,bError));
            vacios++;
            mensaje += "\nAEROPUERTO";
        }
        if (jTextField17.getText() == null || "".equals(jTextField17.getText())) {
            botonSeleccionarComandante.setForeground(new java.awt.Color(rError,gError,bError));
            vacios++;
            mensaje += "\nCOMANDANTE";
        }
        if (jTextField21.getText() == null || "".equals(jTextField21.getText())) {
            botonSeleccionarPrimer.setForeground(new java.awt.Color(rError,gError,bError));
            vacios++;
            mensaje += "\n1er. OFICIAL";
        }
        if (vacios == 0) {
            ConexionMysql conexionPlanes= new ConexionMysql();
            if (conexionPlanes.conectarBD(sv,us,pw,dB)) {
                String horasItinerario = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerHoraItinerario.getValue().toString()));
                String minutosItinerario = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerMinutosItinerario.getValue().toString()));
                String horasReal = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerHoraReal.getValue().toString()));
                String minutosReal = FuncionesGenerales.integerFormat(Integer.parseInt(jSpinnerMinutosReal.getValue().toString()));
                String tiempoReal = horasReal + ":" + minutosReal + ":00";
                SimpleDateFormat ft4 = new SimpleDateFormat("yyyy-MM-dd");   
                String fechaCompletaM = ft4.format(jDateChooser2.getDate()) + " " + horasItinerario + ":" + minutosItinerario + ":00";
                String columnasATomar [] = {"fecha_hora_itinerario","hora_real","no_de_vuelo","empresa","aeronave","comandante","primer","sobrecargos","destino","tramo_interior","exentos_nacionales","internacionales","exentos_internacionales","infantes","transito","total","ttl_pasajeros","ttl_equipaje","ttl_carga","ttl_correo"};
                String valoresAInsertar [] = {fechaCompletaM,tiempoReal,jTextField15.getText(),jTextField12.getText(),jTextField14.getText(),jTextField19.getText(),jTextField20.getText(),"",jTextField18.getText(),"0","0","0","0","0","0","0","0/0/0","0/0/0","0/0/0","0/0/0"};
                String tablaSL = "MANIFIESTOS_SALIDA";
                String mensajeSiRepiteSL = "YA EXISTE EN LA BASE DE DATOS UN MANIFIESTO DE SALIDA CON ESTA FECHA Y HORA";
                String tipoOperacion = (String) jComboBoxOperacionManifiestos.getSelectedItem();
                if (tipoOperacion.equals("MANIFIESTO DE SALIDA")) {
                    if (jLabel40.isEnabled()) {
                        valoresAInsertar[9] = embarque[0];
                        valoresAInsertar[10] = embarque[1];
                        valoresAInsertar[11] = embarque[2];
                        valoresAInsertar[12] = embarque[3];
                        valoresAInsertar[13] = embarque[4];
                        valoresAInsertar[14] = embarque[5];
                        valoresAInsertar[15] = embarque[6];
                        valoresAInsertar[16] = embarque[7];
                        valoresAInsertar[17] = embarque[8];
                        valoresAInsertar[18] = embarque[9];
                        valoresAInsertar[19] = embarque[10];
                    }
                } else {
                    tablaSL = "MANIFIESTOS_LLEGADA";
                    String columnasML [] = {"fecha_hora_itinerario","hora_real","no_de_vuelo","empresa","aeronave","comandante","primer","sobrecargos","origen","total_pasajeros","ttl_pasajeros","ttl_equipaje","ttl_carga","ttl_correo"};
                    columnasATomar = columnasML;
                    String [] valoresML = {fechaCompletaM,tiempoReal,jTextField15.getText(),jTextField12.getText(),jTextField14.getText(),jTextField19.getText(),jTextField20.getText(),"",jTextField18.getText(),"0","0/0/0","0/0/0","0/0/0","0/0/0"};
                    valoresAInsertar = valoresML;
                    mensajeSiRepiteSL = "YA EXISTE EN LA BASE DE DATOS UN MANIFIESTO DE LLEGADA CON ESTA FECHA Y HORA";
                    if (jLabel40.isEnabled()) {
                        valoresAInsertar[9] = desembarque[0];
                        valoresAInsertar[10] = desembarque[1];
                        valoresAInsertar[11] = desembarque[2];
                        valoresAInsertar[12] = desembarque[3];
                        valoresAInsertar[13] = desembarque[4];
                    }
                }
                if (jLabel48.isEnabled()) {
                    valoresAInsertar[7] = listaSobrecargos;
                }
                if(!conexionPlanes.insertarFilaEnTabla(tablaSL,columnasATomar,valoresAInsertar,mensajeSiRepiteSL)){
                    JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR REGISTRO",JOptionPane.ERROR_MESSAGE);
                } else {
                    if (tipoOperacion.equals("MANIFIESTO DE SALIDA")) {
                        if (!jTextField22.getText().equals("") && jTextField22.getText() != null) {
                            String columnasSS [] = {"licencia_ss","fecha_ss"};
                            String [] datosSegundo = {jTextField23.getText(),fechaCompletaM};
                            String mensajeSiRepiteRegistro = "REGISTROS DUPLICADOS EN TABLA \"SEGUNDO_SALIDA\"";
                            if(!conexionPlanes.insertarFilaEnTabla("SEGUNDO_SALIDA",columnasSS,datosSegundo,mensajeSiRepiteRegistro)){
                                JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR REGISTRO",JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        if (!jTextField24.getText().equals("") && jTextField24.getText() != null) {
                            String columnasTS [] = {"licencia_ts","fecha_ts"};
                            String [] datosTercero = {jTextField25.getText(),fechaCompletaM};
                            String mensajeSiRepiteRegistro = "REGISTROS DUPLICADOS EN TABLA \"TERCERO_SALIDA\"";
                            if(!conexionPlanes.insertarFilaEnTabla("TERCERO_SALIDA",columnasTS,datosTercero,mensajeSiRepiteRegistro)){
                                JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR REGISTRO",JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else {
                        if (!jTextField22.getText().equals("") && jTextField22.getText() != null) {
                            String columnasSL [] = {"licencia_sl","fecha_sl"};
                            String [] datosSegundo = {jTextField23.getText(),fechaCompletaM};
                            String mensajeSiRepiteRegistro = "REGISTROS DUPLICADOS EN TABLA \"SEGUNDO_LLEGADA\"";
                            if(!conexionPlanes.insertarFilaEnTabla("SEGUNDO_LLEGADA",columnasSL,datosSegundo,mensajeSiRepiteRegistro)){
                                JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR REGISTRO",JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        if (!jTextField24.getText().equals("") && jTextField24.getText() != null) {
                            String columnasTL [] = {"licencia_tl","fecha_tl"};
                            String [] datosTercero = {jTextField25.getText(),fechaCompletaM};
                            String mensajeSiRepiteRegistro = "REGISTROS DUPLICADOS EN TABLA \"TERCERO_LLEGADA\"";
                            if(!conexionPlanes.insertarFilaEnTabla("TERCERO_LLEGADA",columnasTL,datosTercero,mensajeSiRepiteRegistro)){
                                JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR REGISTRO",JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                    if (jLabel39.isEnabled()) {
                        String tablaPDF = "PDFS_SALIDA";
                        String mensajeSiRepiteRegistros = "REGISTROS DUPLICADOS EN TABLA \"PDFS_SALIDA\"";
                        if (tipoOperacion.equals("MANIFIESTO DE LLEGADA")) {
                            tablaPDF = "PDFS_LLEGADA";
                            mensajeSiRepiteRegistros = "REGISTROS DUPLICADOS EN TABLA \"PDFS_LLEGADA\"";
                        }
                        String[] columnasTablaRelacionPDF = {"fecha","pdf"};
                        String[] datosAInsertar = {fechaCompletaM,rutaPDF};
                        if(!conexionPlanes.insertarFilaEnTabla(tablaPDF,columnasTablaRelacionPDF,datosAInsertar,mensajeSiRepiteRegistros)){
                            JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO INSERTAR REGISTRO",JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
                limpiarManifiesto();
            } else {
                JOptionPane.showMessageDialog(this,conexionPlanes.getMensajesError(),"NO SE HA PODIDO CONECTAR A LA BASE",JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,mensaje,"INFORMACIÓN INCOMPLETA",JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBoxOperacionPlanesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxOperacionPlanesItemStateChanged
        String aperturaCierre = jComboBoxOperacionPlanes.getSelectedItem().toString();
        if (aperturaCierre.equals("APERTURA DE PLAN DE VUELO")) {
            jLabel6.setText("HORA");
            jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("AEROPUERTO/AERODROMO DE DESTINO"));
            jLabel10.setText("IDENTIFICACIÓN AERONAVE");
            jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("OTROS DATOS / OBSERVACIONES"));
            jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("PERSONAS A BORDO"));
            jLabel3.setText("PERSONAS A BORDO");
        } else {
            jLabel6.setText("HORA DE LLEGADA");
            jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("PROCEDENCIA"));
            jLabel10.setText("MATRÍCULA");
            jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("OBSERVACIONES"));
            jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("PASAJEROS"));
            jLabel3.setText("PASAJEROS");
        }
        limpiarPlan();
    }//GEN-LAST:event_jComboBoxOperacionPlanesItemStateChanged

    private void jComboBoxOperacionManifiestosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxOperacionManifiestosItemStateChanged
        String aperturaCierre = jComboBoxOperacionManifiestos.getSelectedItem().toString();
        if (aperturaCierre.equals("MANIFIESTO DE SALIDA")) {
            jLabel30.setText("DESTINO");
            jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("EMBARQUE"));
        } else {
            jLabel30.setText("ORIGEN");
            jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("DESEMBARQUE"));
        }
        limpiarManifiesto();
    }//GEN-LAST:event_jComboBoxOperacionManifiestosItemStateChanged

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if (jTabbedPane1.getSelectedIndex() == 0) {
            limpiarPlan();
        } else {
            limpiarManifiesto();
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void botonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarActionPerformed
        jTextField8.setText(null);
        jTextField9.setText(null);
        botonBorrar.setEnabled(false);
        if(copilotoPlanesOriginal == null) {
            jTextField8.setForeground(new java.awt.Color(0,0,0));
        } else {
            jTextField8.setForeground(new java.awt.Color(0,100,0));
        }    
    }//GEN-LAST:event_botonBorrarActionPerformed

    private void botonBorrarSegundoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarSegundoActionPerformed
        jTextField22.setText(null);
        jTextField23.setText(null);
        botonBorrarSegundo.setEnabled(false);
    }//GEN-LAST:event_botonBorrarSegundoActionPerformed

    private void botonBorrarTerceroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarTerceroActionPerformed
        jTextField24.setText(null);
        jTextField25.setText(null);
        botonBorrarTercero.setEnabled(false);
    }//GEN-LAST:event_botonBorrarTerceroActionPerformed

    private void jDateFechaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateFechaPropertyChange
        Color cError = new Color(rError,gError,bError);
        if (jLabel2.getForeground().getRGB() == cError.getRGB() && jDateFecha.getDate() != null) {
            jLabel2.setForeground(new java.awt.Color(0,0,0));
        }
        if (jDateFecha.getDate() != null) {
            SimpleDateFormat formato = new SimpleDateFormat("yyyy/MM/dd");   
            String fechaActual = formato.format(jDateFecha.getDate());
            if (fechaActual.equals(fechaPlanesOriginal)) {
                jLabel2.setForeground(Color.BLACK);
            } else {
                jLabel2.setForeground(new java.awt.Color(0,100,0));
            }
        }
    }//GEN-LAST:event_jDateFechaPropertyChange

    private void jDateChooser2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser2PropertyChange
        Color cError = new Color(rError,gError,bError);
        if (jLabel21.getForeground().getRGB() == cError.getRGB() && jDateChooser2.getDate() != null) {
            jLabel21.setForeground(new java.awt.Color(0,0,0));
        }
    }//GEN-LAST:event_jDateChooser2PropertyChange

    private void jTextField15KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField15KeyTyped
        int limite = 7;
        char caracterValidar = evt.getKeyChar();
        if (!((Character.isAlphabetic(caracterValidar) || Character.isDigit(caracterValidar) || Character.isISOControl(caracterValidar)) && jTextField15.getText().length() < limite)){
            getToolkit().beep(); 
            evt.consume();
        } else {
            char caracterMayuscula = Character.toUpperCase(caracterValidar);
            evt.setKeyChar(caracterMayuscula);
            Color cError = new Color(rError,gError,bError);
            if (jLabel29.getForeground().getRGB() == cError.getRGB() && (jTextField1.getText() == null || jTextField15.getText().equals(""))) {
                jLabel29.setForeground(new java.awt.Color(0,0,0));
            }
        }
    }//GEN-LAST:event_jTextField15KeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        VQJDialogPDFPlanes capturarPDFPlanes = new VQJDialogPDFPlanes(this,true);
        String tipoOperacion = (String) jComboBoxOperacionPlanes.getSelectedItem();
        String nombreTabla = "PDFS_APERTURA";
        if (tipoOperacion.contains("APERTURA DE PLAN DE VUELO")) {
            capturarPDFPlanes.setTitle("PDF'S: APERTURA DE PLAN DE VUELO");
            capturarPDFPlanes.jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("PDF DEL PLAN DE VUELO"));
        } else {
            capturarPDFPlanes.setTitle("PDF'S: CIERRE DE PLAN DE VUELO");
            nombreTabla = "PDFS_CIERRE";
            capturarPDFPlanes.jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("PDF DEL CIERRE DE PLAN DE VUELO"));
        }
        String [] cT = {"ruta_pdf","nombre"};
        if (capturarPDFPlanes.setDatosConexion (sv,us,pw,dB,cT,nombreTabla,"ruta_pdf",rutaPDFPlanesOriginal)) {
            capturarPDFPlanes.setVisible(true);
        } else {
            capturarPDFPlanes.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void botonDeclararEmDesembarque1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDeclararEmDesembarque1ActionPerformed
        String tipoOperacion = (String) jComboBoxOperacionManifiestos.getSelectedItem();
        if (tipoOperacion.contains("MANIFIESTO DE SALIDA")) {
            OJDialogEmbarque emb = new OJDialogEmbarque(this, true);
            if (jLabel40.isEnabled()) {
                emb.jTextFieldTI.setText(embarque[0]);
                emb.jTextFieldEN.setText(embarque[1]);
                emb.jTextFieldInt.setText(embarque[2]);
                emb.jTextFieldEI.setText(embarque[3]);
                emb.jTextFieldInf.setText(embarque[4]);
                emb.jTextFieldT.setText(embarque[5]);
                emb.jTextFieldTotal.setText(embarque[6]);
                String [] personas = embarque[7].split("/");
                emb.jTextFieldTtlPersonas1.setText(personas[0]);
                emb.jTextFieldTtlPersonas2.setText(personas[1]);
                emb.jTextFieldTtlPersonas3.setText(personas[2]);
                String [] equipaje = embarque[8].split("/");
                emb.jTextFieldEquipajePzas.setText(equipaje[0]);
                emb.jTextFieldEquipajeKg.setText(equipaje[1]);
                String [] carga = embarque[9].split("/");
                emb.jTextFieldCargaPzas.setText(carga[0]);
                emb.jTextFieldCargaKg.setText(carga[1]);
                String [] correo = embarque[10].split("/");
                emb.jTextFieldCorreoPzas.setText(correo[0]);
                emb.jTextFieldCorreoKg.setText(correo[1]);
            }
            emb.arregloTextField();
            emb.setVisible(true);
        } else {
            PJDialogDesembarque desemb = new PJDialogDesembarque(this, true);
            if (jLabel40.isEnabled()) {
                desemb.jTextFieldPersonasTotal.setText(desembarque[0]);
                String [] personas = desembarque[1].split("/");
                desemb.jTextFieldTtlPersonas1.setText(personas[0]);
                desemb.jTextFieldTtlPersonas2.setText(personas[1]);
                desemb.jTextFieldTtlPersonas3.setText(personas[2]);
                String [] equipaje = desembarque[2].split("/");
                desemb.jTextFieldEquipajePzas.setText(equipaje[0]);
                desemb.jTextFieldEquipajeKg.setText(equipaje[1]);
                String [] carga = desembarque[3].split("/");
                desemb.jTextFieldCargaPzas.setText(carga[0]);
                desemb.jTextFieldCargaKg.setText(carga[1]);
                String [] correo = desembarque[4].split("/");
                desemb.jTextFieldCorreoPzas.setText(correo[0]);
                desemb.jTextFieldCorreoKg.setText(correo[1]);
            }
            desemb.arregloTextField();
            desemb.setVisible(true);
        }
    }//GEN-LAST:event_botonDeclararEmDesembarque1ActionPerformed

    private void jTextArea1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyReleased
        if (multiplesRenglonesOriginal.equals(jTextArea1.getText())){
            jTextArea1.setForeground(new java.awt.Color(0,0,0));
        } else {
            jTextArea1.setForeground(new java.awt.Color(0,100,0)); 
        } 
    }//GEN-LAST:event_jTextArea1KeyReleased

    private void jTextFieldPersonasPasajerosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPersonasPasajerosKeyReleased
        if (numeroPPOriginal.equals(jTextFieldPersonasPasajeros.getText())){
            jTextFieldPersonasPasajeros.setForeground(new java.awt.Color(0,0,0));
        } else {
            jTextFieldPersonasPasajeros.setForeground(new java.awt.Color(0,100,0)); 
        } 
    }//GEN-LAST:event_jTextFieldPersonasPasajerosKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VJFrameVentanaCapturarModificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VJFrameVentanaCapturarModificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VJFrameVentanaCapturarModificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VJFrameVentanaCapturarModificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VJFrameVentanaCapturarModificaciones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton botonBorrar;
    public static javax.swing.JButton botonBorrarSegundo;
    public static javax.swing.JButton botonBorrarTercero;
    private javax.swing.JButton botonDeclararEmDesembarque1;
    private javax.swing.JButton botonDeclararPDF;
    private javax.swing.JButton botonDeclararSobrecargos;
    private javax.swing.JButton botonListaPasajeros;
    private javax.swing.JButton botonModificarPlanes;
    public static javax.swing.JButton botonSeleccionarAeronaveManifiestos;
    public static javax.swing.JButton botonSeleccionarAeronavePlanes;
    public static javax.swing.JButton botonSeleccionarAeropuertoManifiestos;
    public static javax.swing.JButton botonSeleccionarAeropuertoPlanes;
    public static javax.swing.JButton botonSeleccionarComandante;
    public static javax.swing.JButton botonSeleccionarCompaniaManifiestos;
    private javax.swing.JButton botonSeleccionarCopiloto;
    public static javax.swing.JButton botonSeleccionarPilotoPlanes;
    public static javax.swing.JButton botonSeleccionarPrimer;
    private javax.swing.JButton botonSeleccionarSegundo;
    private javax.swing.JButton botonSeleccionarTercero;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    public javax.swing.JComboBox jComboBoxOperacionManifiestos;
    public javax.swing.JComboBox jComboBoxOperacionPlanes;
    public com.toedter.calendar.JDateChooser jDateChooser2;
    public com.toedter.calendar.JDateChooser jDateFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    public static javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    public static javax.swing.JLabel jLabel18;
    public static javax.swing.JLabel jLabel19;
    public javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    public static javax.swing.JLabel jLabel38;
    public static javax.swing.JLabel jLabel39;
    public static javax.swing.JLabel jLabel4;
    public static javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    public static javax.swing.JLabel jLabel48;
    public static javax.swing.JLabel jLabel51;
    public static javax.swing.JLabel jLabel52;
    public static javax.swing.JLabel jLabel53;
    public javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerHoraItinerario;
    private javax.swing.JSpinner jSpinnerHoraReal;
    public javax.swing.JSpinner jSpinnerHorasUTC;
    private javax.swing.JSpinner jSpinnerMinutosItinerario;
    private javax.swing.JSpinner jSpinnerMinutosReal;
    public javax.swing.JSpinner jSpinnerMinutosUTC;
    public javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextField jTextField1;
    public static javax.swing.JTextField jTextField11;
    public static javax.swing.JTextField jTextField12;
    public static javax.swing.JTextField jTextField13;
    public static javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    public static javax.swing.JTextField jTextField16;
    public static javax.swing.JTextField jTextField17;
    public static javax.swing.JTextField jTextField18;
    public static javax.swing.JTextField jTextField19;
    public static javax.swing.JTextField jTextField2;
    public static javax.swing.JTextField jTextField20;
    public static javax.swing.JTextField jTextField21;
    public static javax.swing.JTextField jTextField22;
    public static javax.swing.JTextField jTextField23;
    public static javax.swing.JTextField jTextField24;
    public static javax.swing.JTextField jTextField25;
    public static javax.swing.JTextField jTextField3;
    public static javax.swing.JTextField jTextField4;
    public static javax.swing.JTextField jTextField5;
    public static javax.swing.JTextField jTextField6;
    public static javax.swing.JTextField jTextField7;
    public static javax.swing.JTextField jTextField8;
    public static javax.swing.JTextField jTextField9;
    public javax.swing.JTextField jTextFieldPersonasPasajeros;
    // End of variables declaration//GEN-END:variables

    private String sv = "localhost";
    private String us = "root";
    private String pw = "l1u2c3h4o5e6d7u";
    private String dB = "baseaeropuerto";
    static String [][] listaPasajeros;
    static String listaSobrecargos;
    static String [] embarque;
    static String [] desembarque;
    static String rutaPDF;
    final int rError = 255;
    final int gError = 0;
    final int bError = 0;
    Color colorFondo;
    
    static String aeropuertoPlanesOriginal;
    static String aeronavePlanesOriginal;
    static String pilotoPlanesOriginal;
    static String copilotoPlanesOriginal;
    static String [][] listaPasajerosOriginal;
    static String [][] numeracionPasajerosOriginal;
    static String rutaPDFPlanesOriginal;
    static String fechaPlanesOriginal;
    static String horasPlanesOriginal;
    static String minutosPlanesOriginal;
    static String fechaCompletaPlanesOriginal;
    static String multiplesRenglonesOriginal;
    static String numeroPPOriginal;
    
    private void limpiarManifiesto() {
        botonSeleccionarCompaniaManifiestos.setForeground(new java.awt.Color(0,0,0));
        botonSeleccionarAeronaveManifiestos.setForeground(new java.awt.Color(0,0,0));
        botonSeleccionarAeropuertoManifiestos.setForeground(new java.awt.Color(0,0,0));
        botonSeleccionarComandante.setForeground(new java.awt.Color(0,0,0));
        botonSeleccionarPrimer.setForeground(new java.awt.Color(0,0,0));
        jLabel29.setForeground(new java.awt.Color(0,0,0));
        jLabel21.setForeground(new java.awt.Color(0,0,0));
        jTextField11.setText(null);
        jTextField12.setText(null);
        jTextField13.setText(null);
        jTextField14.setText(null);
        jTextField15.setText(null);
        jTextField16.setText(null);
        jTextField18.setText(null);
        jTextField17.setText(null);
        jTextField19.setText(null);
        jTextField21.setText(null);
        jTextField20.setText(null);
        jTextField22.setText(null);
        jTextField23.setText(null);
        jTextField24.setText(null);
        jTextField25.setText(null);
        jLabel18.setText(null);
        jLabel53.setText(null);
        jLabel51.setText(null);
        jLabel52.setText(null);
        jLabel48.setEnabled(false);
        jLabel39.setEnabled(false);
        jLabel40.setEnabled(false);
        jDateChooser2.setDate(null);
        jSpinnerHoraItinerario.setValue(0);
        jSpinnerMinutosItinerario.setValue(0);
        jSpinnerHoraReal.setValue(0);
        jSpinnerMinutosReal.setValue(0);
        listaSobrecargos = null;
        embarque = null;
        desembarque = null;
        rutaPDF = null;
    }
    
    private void limpiarPlan() {
        botonSeleccionarAeropuertoPlanes.setForeground(new java.awt.Color(0,0,0));
        botonSeleccionarAeronavePlanes.setForeground(new java.awt.Color(0,0,0));
        botonSeleccionarPilotoPlanes.setForeground(new java.awt.Color(0,0,0));
        jLabel2.setForeground(new java.awt.Color(0,0,0));
        jLabel3.setForeground(colorFondo);
        jTextField1.setText(null);
        jTextField2.setText(null);
        jTextField3.setText(null);
        jTextField4.setText(null);
        jTextField5.setText(null);
        jTextField6.setText(null);
        jTextField7.setText(null);
        jTextFieldPersonasPasajeros.setText(null);
        jTextArea1.setText(null);
        jLabel14.setText(null);
        jLabel38.setText(null);
        jLabel4.setEnabled(false);
        jLabel19.setEnabled(false);
        jDateFecha.setDate(null);
        jSpinnerHorasUTC.setValue(0);
        jSpinnerMinutosUTC.setValue(0);
        jTextField8.setText(null);
        jTextField9.setText(null);
        listaPasajeros = null;
        rutaPDF = null;
    }
    
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
        getImage(ClassLoader.getSystemResource("Necesarios/iconoP.png"));
        return retValue;
    }
    
}
